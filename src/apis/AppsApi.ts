/* tslint:disable */
/* eslint-disable */
/**
 * HYPLAY API
 * HYPLAY API Specification
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: braydon@hytopia.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AppModel,
  AppTeammateModel,
  CreateApp200Response,
  CreateAppRequest,
  CreateAppTeammateRequest,
  EndSessionRequest,
  GetAppState200Response,
  GetAppTeammates200Response,
  GetAppUser200Response,
  GetAppUsers200Response,
  GetApps200Response,
  GetPublicApp200Response,
  GrantSessionTokenRequest,
  SessionModel,
  SetAppState200Response,
  SetAppStateRequest,
  UpdateAppRequest,
  UpdateAppTeammateRequest,
} from '../models/index';
import {
    AppModelFromJSON,
    AppModelToJSON,
    AppTeammateModelFromJSON,
    AppTeammateModelToJSON,
    CreateApp200ResponseFromJSON,
    CreateApp200ResponseToJSON,
    CreateAppRequestFromJSON,
    CreateAppRequestToJSON,
    CreateAppTeammateRequestFromJSON,
    CreateAppTeammateRequestToJSON,
    EndSessionRequestFromJSON,
    EndSessionRequestToJSON,
    GetAppState200ResponseFromJSON,
    GetAppState200ResponseToJSON,
    GetAppTeammates200ResponseFromJSON,
    GetAppTeammates200ResponseToJSON,
    GetAppUser200ResponseFromJSON,
    GetAppUser200ResponseToJSON,
    GetAppUsers200ResponseFromJSON,
    GetAppUsers200ResponseToJSON,
    GetApps200ResponseFromJSON,
    GetApps200ResponseToJSON,
    GetPublicApp200ResponseFromJSON,
    GetPublicApp200ResponseToJSON,
    GrantSessionTokenRequestFromJSON,
    GrantSessionTokenRequestToJSON,
    SessionModelFromJSON,
    SessionModelToJSON,
    SetAppState200ResponseFromJSON,
    SetAppState200ResponseToJSON,
    SetAppStateRequestFromJSON,
    SetAppStateRequestToJSON,
    UpdateAppRequestFromJSON,
    UpdateAppRequestToJSON,
    UpdateAppTeammateRequestFromJSON,
    UpdateAppTeammateRequestToJSON,
} from '../models/index';

export interface CreateAppOperationRequest {
    xAuthorization: string;
    createAppRequest: CreateAppRequest;
}

export interface CreateAppTeammateOperationRequest {
    xAuthorization: string;
    appId: string;
    createAppTeammateRequest: CreateAppTeammateRequest;
}

export interface DeleteAppTeammateRequest {
    xAuthorization: string;
    appId: string;
    userId: string;
}

export interface EndSessionOperationRequest {
    endSessionRequest: EndSessionRequest;
    xAuthorization?: string;
    xSessionAuthorization?: string;
    xAppAuthorization?: string;
}

export interface GetAppStateRequest {
    appId: string;
    key?: string;
    xAppAuthorization?: string;
    xSessionAuthorization?: string;
}

export interface GetAppTeammatesRequest {
    xAuthorization: string;
    appId: string;
}

export interface GetAppUserRequest {
    appId: string;
    userId: string;
}

export interface GetAppUsersRequest {
    appId: string;
    xAppAuthorization?: string;
    cursor?: string;
}

export interface GetAppsRequest {
    xAuthorization?: string;
    cursor?: string;
}

export interface GetPublicAppRequest {
    appId: string;
}

export interface GrantSessionTokenOperationRequest {
    xAppAuthorization: string;
    grantSessionTokenRequest: GrantSessionTokenRequest;
}

export interface SetAppStateOperationRequest {
    appId: string;
    setAppStateRequest: SetAppStateRequest;
    xAppAuthorization?: string;
    xSessionAuthorization?: string;
}

export interface UpdateAppOperationRequest {
    xAuthorization: string;
    appId: string;
    updateAppRequest: UpdateAppRequest;
}

export interface UpdateAppTeammateOperationRequest {
    xAuthorization: string;
    appId: string;
    userId: string;
    updateAppTeammateRequest: UpdateAppTeammateRequest;
}

/**
 * AppsApi - interface
 * 
 * @export
 * @interface AppsApiInterface
 */
export interface AppsApiInterface {
    /**
     * Create a new app for the authorized user.
     * @summary Create app
     * @param {string} xAuthorization The &#x60;accessToken&#x60; of the authenticating user.
     * @param {CreateAppRequest} createAppRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    createAppRaw(requestParameters: CreateAppOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateApp200Response>>;

    /**
     * Create a new app for the authorized user.
     * Create app
     */
    createApp(requestParameters: CreateAppOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateApp200Response>;

    /**
     * Create a teammate for the provided appId, userId and role. Authorized user must be the owner of the app, or be a teammate with a role of OWNER.
     * @summary Create app teammate
     * @param {string} xAuthorization The &#x60;accessToken&#x60; of the authenticating user.
     * @param {string} appId An application id.
     * @param {CreateAppTeammateRequest} createAppTeammateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    createAppTeammateRaw(requestParameters: CreateAppTeammateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppTeammateModel>>;

    /**
     * Create a teammate for the provided appId, userId and role. Authorized user must be the owner of the app, or be a teammate with a role of OWNER.
     * Create app teammate
     */
    createAppTeammate(requestParameters: CreateAppTeammateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppTeammateModel>;

    /**
     * Delete a teammate for the provided appId and userId. Authorized user must be the owner of the app, or be a teammate with a role of OWNER.
     * @summary Delete app teammate
     * @param {string} xAuthorization The &#x60;accessToken&#x60; of the authenticating user.
     * @param {string} appId An application id.
     * @param {string} userId A user id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    deleteAppTeammateRaw(requestParameters: DeleteAppTeammateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a teammate for the provided appId and userId. Authorized user must be the owner of the app, or be a teammate with a role of OWNER.
     * Delete app teammate
     */
    deleteAppTeammate(requestParameters: DeleteAppTeammateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Ends all active sessions for a given user. This endpoint is flexible and can end sessions in a number of ways. An app can end any user\'s sessions of their app directly, or a user can end their own sessions for an app, or a session access token can be used to end its associated session.
     * @summary End session
     * @param {EndSessionRequest} endSessionRequest 
     * @param {string} [xAuthorization] The &#x60;accessToken&#x60; of the authenticating user.
     * @param {string} [xSessionAuthorization] The &#x60;accessToken&#x60; of the authenticating session.
     * @param {string} [xAppAuthorization] The &#x60;secretKey&#x60; or &#x60;testSecretKey&#x60; of the authenticating app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    endSessionRaw(requestParameters: EndSessionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Ends all active sessions for a given user. This endpoint is flexible and can end sessions in a number of ways. An app can end any user\'s sessions of their app directly, or a user can end their own sessions for an app, or a session access token can be used to end its associated session.
     * End session
     */
    endSession(requestParameters: EndSessionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Get the public, protected, private state of an app, user or key.
     * @summary Get app state
     * @param {string} appId An application id.
     * @param {string} [key] A string identifier unique to an app for looking up state data.
     * @param {string} [xAppAuthorization] The &#x60;secretKey&#x60; or &#x60;testSecretKey&#x60; of the authenticating app.
     * @param {string} [xSessionAuthorization] The &#x60;accessToken&#x60; of the authenticating session.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    getAppStateRaw(requestParameters: GetAppStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAppState200Response>>;

    /**
     * Get the public, protected, private state of an app, user or key.
     * Get app state
     */
    getAppState(requestParameters: GetAppStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAppState200Response>;

    /**
     * Get an array of teammates for the provided appId.
     * @summary Get app teammates
     * @param {string} xAuthorization The &#x60;accessToken&#x60; of the authenticating user.
     * @param {string} appId An application id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    getAppTeammatesRaw(requestParameters: GetAppTeammatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAppTeammates200Response>>;

    /**
     * Get an array of teammates for the provided appId.
     * Get app teammates
     */
    getAppTeammates(requestParameters: GetAppTeammatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAppTeammates200Response>;

    /**
     * Returns a public user object representing a user of the app that also includes the `totalAppReferrals` property which represents the number of other users the user for the provided userId has referred to the provided appId.
     * @summary Get app user
     * @param {string} appId An application id.
     * @param {string} userId A user id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    getAppUserRaw(requestParameters: GetAppUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAppUser200Response>>;

    /**
     * Returns a public user object representing a user of the app that also includes the `totalAppReferrals` property which represents the number of other users the user for the provided userId has referred to the provided appId.
     * Get app user
     */
    getAppUser(requestParameters: GetAppUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAppUser200Response>;

    /**
     * Returns an array of public users objects representing users of the apps. A HYPLAY user is considered a user of the app if they have had at least 1 active session for the provided appId.
     * @summary Get app users
     * @param {string} appId An application id.
     * @param {string} [xAppAuthorization] The &#x60;secretKey&#x60; or &#x60;testSecretKey&#x60; of the authenticating app.
     * @param {string} [cursor] An id from the record type to start the pagination of the next results, excluding the provided record id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    getAppUsersRaw(requestParameters: GetAppUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAppUsers200Response>>;

    /**
     * Returns an array of public users objects representing users of the apps. A HYPLAY user is considered a user of the app if they have had at least 1 active session for the provided appId.
     * Get app users
     */
    getAppUsers(requestParameters: GetAppUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAppUsers200Response>;

    /**
     * Returns an array of apps owned by, or a teammate of, for the authorized user, or up to 25 public apps across HYPLAY if no authorization is provided. Supports pagination for public apps when no user authorization is provided - a `cursor` query parameter can be provided for paginating results based on last result set id.
     * @summary Get apps
     * @param {string} [xAuthorization] The &#x60;accessToken&#x60; of the authenticating user.
     * @param {string} [cursor] An id from the record type to start the pagination of the next results, excluding the provided record id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    getAppsRaw(requestParameters: GetAppsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetApps200Response>>;

    /**
     * Returns an array of apps owned by, or a teammate of, for the authorized user, or up to 25 public apps across HYPLAY if no authorization is provided. Supports pagination for public apps when no user authorization is provided - a `cursor` query parameter can be provided for paginating results based on last result set id.
     * Get apps
     */
    getApps(requestParameters: GetAppsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetApps200Response>;

    /**
     * Return a public app object for the provided appId.
     * @summary Get public app
     * @param {string} appId An application id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    getPublicAppRaw(requestParameters: GetPublicAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPublicApp200Response>>;

    /**
     * Return a public app object for the provided appId.
     * Get public app
     */
    getPublicApp(requestParameters: GetPublicAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPublicApp200Response>;

    /**
     * Returns a session object with a valid access token when the associated exchangeCode and application authorized by using its secret key is provided.
     * @summary Grant session token
     * @param {string} xAppAuthorization The &#x60;secretKey&#x60; or &#x60;testSecretKey&#x60; of the authenticating app.
     * @param {GrantSessionTokenRequest} grantSessionTokenRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    grantSessionTokenRaw(requestParameters: GrantSessionTokenOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SessionModel>>;

    /**
     * Returns a session object with a valid access token when the associated exchangeCode and application authorized by using its secret key is provided.
     * Grant session token
     */
    grantSessionToken(requestParameters: GrantSessionTokenOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SessionModel>;

    /**
     * Set arbitrary JSON blobs for public, protected and/or private state specific to an application or authorized user of an application. This is useful for saving different types of data specific to users or global configuration of your app or game in many different situations. It is intended to be highly flexible. State set for a user of your app, a unique lookup key, and the app itself are all isolated to your application. State storage is not globablly shared between applications.
     * @summary Set app state
     * @param {string} appId An application id.
     * @param {SetAppStateRequest} setAppStateRequest 
     * @param {string} [xAppAuthorization] The &#x60;secretKey&#x60; or &#x60;testSecretKey&#x60; of the authenticating app.
     * @param {string} [xSessionAuthorization] The &#x60;accessToken&#x60; of the authenticating session.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    setAppStateRaw(requestParameters: SetAppStateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SetAppState200Response>>;

    /**
     * Set arbitrary JSON blobs for public, protected and/or private state specific to an application or authorized user of an application. This is useful for saving different types of data specific to users or global configuration of your app or game in many different situations. It is intended to be highly flexible. State set for a user of your app, a unique lookup key, and the app itself are all isolated to your application. State storage is not globablly shared between applications.
     * Set app state
     */
    setAppState(requestParameters: SetAppStateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SetAppState200Response>;

    /**
     * Update an app owned by the authorized user for the provided appId.
     * @summary Update app
     * @param {string} xAuthorization The &#x60;accessToken&#x60; of the authenticating user.
     * @param {string} appId An application id.
     * @param {UpdateAppRequest} updateAppRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    updateAppRaw(requestParameters: UpdateAppOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppModel>>;

    /**
     * Update an app owned by the authorized user for the provided appId.
     * Update app
     */
    updateApp(requestParameters: UpdateAppOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppModel>;

    /**
     * Update the role of a teammate for the provided appId and userId. Authorized user must be the owner of the app, or be a teammate with a role of OWNER.
     * @summary Update app teammate
     * @param {string} xAuthorization The &#x60;accessToken&#x60; of the authenticating user.
     * @param {string} appId An application id.
     * @param {string} userId A user id.
     * @param {UpdateAppTeammateRequest} updateAppTeammateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    updateAppTeammateRaw(requestParameters: UpdateAppTeammateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppTeammateModel>>;

    /**
     * Update the role of a teammate for the provided appId and userId. Authorized user must be the owner of the app, or be a teammate with a role of OWNER.
     * Update app teammate
     */
    updateAppTeammate(requestParameters: UpdateAppTeammateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppTeammateModel>;

}

/**
 * 
 */
export class AppsApi extends runtime.BaseAPI implements AppsApiInterface {

    /**
     * Create a new app for the authorized user.
     * Create app
     */
    async createAppRaw(requestParameters: CreateAppOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateApp200Response>> {
        if (requestParameters['xAuthorization'] == null) {
            throw new runtime.RequiredError(
                'xAuthorization',
                'Required parameter "xAuthorization" was null or undefined when calling createApp().'
            );
        }

        if (requestParameters['createAppRequest'] == null) {
            throw new runtime.RequiredError(
                'createAppRequest',
                'Required parameter "createAppRequest" was null or undefined when calling createApp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xAuthorization'] != null) {
            headerParameters['x-authorization'] = String(requestParameters['xAuthorization']);
        }

        const response = await this.request({
            path: `/v1/apps`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAppRequestToJSON(requestParameters['createAppRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateApp200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a new app for the authorized user.
     * Create app
     */
    async createApp(requestParameters: CreateAppOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateApp200Response> {
        const response = await this.createAppRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a teammate for the provided appId, userId and role. Authorized user must be the owner of the app, or be a teammate with a role of OWNER.
     * Create app teammate
     */
    async createAppTeammateRaw(requestParameters: CreateAppTeammateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppTeammateModel>> {
        if (requestParameters['xAuthorization'] == null) {
            throw new runtime.RequiredError(
                'xAuthorization',
                'Required parameter "xAuthorization" was null or undefined when calling createAppTeammate().'
            );
        }

        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling createAppTeammate().'
            );
        }

        if (requestParameters['createAppTeammateRequest'] == null) {
            throw new runtime.RequiredError(
                'createAppTeammateRequest',
                'Required parameter "createAppTeammateRequest" was null or undefined when calling createAppTeammate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xAuthorization'] != null) {
            headerParameters['x-authorization'] = String(requestParameters['xAuthorization']);
        }

        const response = await this.request({
            path: `/v1/apps/{appId}/teammates`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAppTeammateRequestToJSON(requestParameters['createAppTeammateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppTeammateModelFromJSON(jsonValue));
    }

    /**
     * Create a teammate for the provided appId, userId and role. Authorized user must be the owner of the app, or be a teammate with a role of OWNER.
     * Create app teammate
     */
    async createAppTeammate(requestParameters: CreateAppTeammateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppTeammateModel> {
        const response = await this.createAppTeammateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a teammate for the provided appId and userId. Authorized user must be the owner of the app, or be a teammate with a role of OWNER.
     * Delete app teammate
     */
    async deleteAppTeammateRaw(requestParameters: DeleteAppTeammateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['xAuthorization'] == null) {
            throw new runtime.RequiredError(
                'xAuthorization',
                'Required parameter "xAuthorization" was null or undefined when calling deleteAppTeammate().'
            );
        }

        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling deleteAppTeammate().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteAppTeammate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAuthorization'] != null) {
            headerParameters['x-authorization'] = String(requestParameters['xAuthorization']);
        }

        const response = await this.request({
            path: `/v1/apps/{appId}/teammates/{userId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a teammate for the provided appId and userId. Authorized user must be the owner of the app, or be a teammate with a role of OWNER.
     * Delete app teammate
     */
    async deleteAppTeammate(requestParameters: DeleteAppTeammateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAppTeammateRaw(requestParameters, initOverrides);
    }

    /**
     * Ends all active sessions for a given user. This endpoint is flexible and can end sessions in a number of ways. An app can end any user\'s sessions of their app directly, or a user can end their own sessions for an app, or a session access token can be used to end its associated session.
     * End session
     */
    async endSessionRaw(requestParameters: EndSessionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['endSessionRequest'] == null) {
            throw new runtime.RequiredError(
                'endSessionRequest',
                'Required parameter "endSessionRequest" was null or undefined when calling endSession().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xAuthorization'] != null) {
            headerParameters['x-authorization'] = String(requestParameters['xAuthorization']);
        }

        if (requestParameters['xSessionAuthorization'] != null) {
            headerParameters['x-session-authorization'] = String(requestParameters['xSessionAuthorization']);
        }

        if (requestParameters['xAppAuthorization'] != null) {
            headerParameters['x-app-authorization'] = String(requestParameters['xAppAuthorization']);
        }

        const response = await this.request({
            path: `/v1/sessions`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: EndSessionRequestToJSON(requestParameters['endSessionRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Ends all active sessions for a given user. This endpoint is flexible and can end sessions in a number of ways. An app can end any user\'s sessions of their app directly, or a user can end their own sessions for an app, or a session access token can be used to end its associated session.
     * End session
     */
    async endSession(requestParameters: EndSessionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.endSessionRaw(requestParameters, initOverrides);
    }

    /**
     * Get the public, protected, private state of an app, user or key.
     * Get app state
     */
    async getAppStateRaw(requestParameters: GetAppStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAppState200Response>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling getAppState().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['key'] != null) {
            queryParameters['key'] = requestParameters['key'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAppAuthorization'] != null) {
            headerParameters['x-app-authorization'] = String(requestParameters['xAppAuthorization']);
        }

        if (requestParameters['xSessionAuthorization'] != null) {
            headerParameters['x-session-authorization'] = String(requestParameters['xSessionAuthorization']);
        }

        const response = await this.request({
            path: `/v1/apps/{appId}/states`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAppState200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the public, protected, private state of an app, user or key.
     * Get app state
     */
    async getAppState(requestParameters: GetAppStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAppState200Response> {
        const response = await this.getAppStateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an array of teammates for the provided appId.
     * Get app teammates
     */
    async getAppTeammatesRaw(requestParameters: GetAppTeammatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAppTeammates200Response>> {
        if (requestParameters['xAuthorization'] == null) {
            throw new runtime.RequiredError(
                'xAuthorization',
                'Required parameter "xAuthorization" was null or undefined when calling getAppTeammates().'
            );
        }

        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling getAppTeammates().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAuthorization'] != null) {
            headerParameters['x-authorization'] = String(requestParameters['xAuthorization']);
        }

        const response = await this.request({
            path: `/v1/apps/{appId}/teammates`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAppTeammates200ResponseFromJSON(jsonValue));
    }

    /**
     * Get an array of teammates for the provided appId.
     * Get app teammates
     */
    async getAppTeammates(requestParameters: GetAppTeammatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAppTeammates200Response> {
        const response = await this.getAppTeammatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a public user object representing a user of the app that also includes the `totalAppReferrals` property which represents the number of other users the user for the provided userId has referred to the provided appId.
     * Get app user
     */
    async getAppUserRaw(requestParameters: GetAppUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAppUser200Response>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling getAppUser().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getAppUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/apps/{appId}/users/{userId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAppUser200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a public user object representing a user of the app that also includes the `totalAppReferrals` property which represents the number of other users the user for the provided userId has referred to the provided appId.
     * Get app user
     */
    async getAppUser(requestParameters: GetAppUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAppUser200Response> {
        const response = await this.getAppUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns an array of public users objects representing users of the apps. A HYPLAY user is considered a user of the app if they have had at least 1 active session for the provided appId.
     * Get app users
     */
    async getAppUsersRaw(requestParameters: GetAppUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAppUsers200Response>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling getAppUsers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAppAuthorization'] != null) {
            headerParameters['x-app-authorization'] = String(requestParameters['xAppAuthorization']);
        }

        const response = await this.request({
            path: `/v1/apps/{appId}/users`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAppUsers200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns an array of public users objects representing users of the apps. A HYPLAY user is considered a user of the app if they have had at least 1 active session for the provided appId.
     * Get app users
     */
    async getAppUsers(requestParameters: GetAppUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAppUsers200Response> {
        const response = await this.getAppUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns an array of apps owned by, or a teammate of, for the authorized user, or up to 25 public apps across HYPLAY if no authorization is provided. Supports pagination for public apps when no user authorization is provided - a `cursor` query parameter can be provided for paginating results based on last result set id.
     * Get apps
     */
    async getAppsRaw(requestParameters: GetAppsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetApps200Response>> {
        const queryParameters: any = {};

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAuthorization'] != null) {
            headerParameters['x-authorization'] = String(requestParameters['xAuthorization']);
        }

        const response = await this.request({
            path: `/v1/apps`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetApps200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns an array of apps owned by, or a teammate of, for the authorized user, or up to 25 public apps across HYPLAY if no authorization is provided. Supports pagination for public apps when no user authorization is provided - a `cursor` query parameter can be provided for paginating results based on last result set id.
     * Get apps
     */
    async getApps(requestParameters: GetAppsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetApps200Response> {
        const response = await this.getAppsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a public app object for the provided appId.
     * Get public app
     */
    async getPublicAppRaw(requestParameters: GetPublicAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPublicApp200Response>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling getPublicApp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/apps/{appId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPublicApp200ResponseFromJSON(jsonValue));
    }

    /**
     * Return a public app object for the provided appId.
     * Get public app
     */
    async getPublicApp(requestParameters: GetPublicAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPublicApp200Response> {
        const response = await this.getPublicAppRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a session object with a valid access token when the associated exchangeCode and application authorized by using its secret key is provided.
     * Grant session token
     */
    async grantSessionTokenRaw(requestParameters: GrantSessionTokenOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SessionModel>> {
        if (requestParameters['xAppAuthorization'] == null) {
            throw new runtime.RequiredError(
                'xAppAuthorization',
                'Required parameter "xAppAuthorization" was null or undefined when calling grantSessionToken().'
            );
        }

        if (requestParameters['grantSessionTokenRequest'] == null) {
            throw new runtime.RequiredError(
                'grantSessionTokenRequest',
                'Required parameter "grantSessionTokenRequest" was null or undefined when calling grantSessionToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xAppAuthorization'] != null) {
            headerParameters['x-app-authorization'] = String(requestParameters['xAppAuthorization']);
        }

        const response = await this.request({
            path: `/v1/sessions/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GrantSessionTokenRequestToJSON(requestParameters['grantSessionTokenRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SessionModelFromJSON(jsonValue));
    }

    /**
     * Returns a session object with a valid access token when the associated exchangeCode and application authorized by using its secret key is provided.
     * Grant session token
     */
    async grantSessionToken(requestParameters: GrantSessionTokenOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SessionModel> {
        const response = await this.grantSessionTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set arbitrary JSON blobs for public, protected and/or private state specific to an application or authorized user of an application. This is useful for saving different types of data specific to users or global configuration of your app or game in many different situations. It is intended to be highly flexible. State set for a user of your app, a unique lookup key, and the app itself are all isolated to your application. State storage is not globablly shared between applications.
     * Set app state
     */
    async setAppStateRaw(requestParameters: SetAppStateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SetAppState200Response>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling setAppState().'
            );
        }

        if (requestParameters['setAppStateRequest'] == null) {
            throw new runtime.RequiredError(
                'setAppStateRequest',
                'Required parameter "setAppStateRequest" was null or undefined when calling setAppState().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xAppAuthorization'] != null) {
            headerParameters['x-app-authorization'] = String(requestParameters['xAppAuthorization']);
        }

        if (requestParameters['xSessionAuthorization'] != null) {
            headerParameters['x-session-authorization'] = String(requestParameters['xSessionAuthorization']);
        }

        const response = await this.request({
            path: `/v1/apps/{appId}/states`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetAppStateRequestToJSON(requestParameters['setAppStateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SetAppState200ResponseFromJSON(jsonValue));
    }

    /**
     * Set arbitrary JSON blobs for public, protected and/or private state specific to an application or authorized user of an application. This is useful for saving different types of data specific to users or global configuration of your app or game in many different situations. It is intended to be highly flexible. State set for a user of your app, a unique lookup key, and the app itself are all isolated to your application. State storage is not globablly shared between applications.
     * Set app state
     */
    async setAppState(requestParameters: SetAppStateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SetAppState200Response> {
        const response = await this.setAppStateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an app owned by the authorized user for the provided appId.
     * Update app
     */
    async updateAppRaw(requestParameters: UpdateAppOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppModel>> {
        if (requestParameters['xAuthorization'] == null) {
            throw new runtime.RequiredError(
                'xAuthorization',
                'Required parameter "xAuthorization" was null or undefined when calling updateApp().'
            );
        }

        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling updateApp().'
            );
        }

        if (requestParameters['updateAppRequest'] == null) {
            throw new runtime.RequiredError(
                'updateAppRequest',
                'Required parameter "updateAppRequest" was null or undefined when calling updateApp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xAuthorization'] != null) {
            headerParameters['x-authorization'] = String(requestParameters['xAuthorization']);
        }

        const response = await this.request({
            path: `/v1/apps/{appId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAppRequestToJSON(requestParameters['updateAppRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppModelFromJSON(jsonValue));
    }

    /**
     * Update an app owned by the authorized user for the provided appId.
     * Update app
     */
    async updateApp(requestParameters: UpdateAppOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppModel> {
        const response = await this.updateAppRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the role of a teammate for the provided appId and userId. Authorized user must be the owner of the app, or be a teammate with a role of OWNER.
     * Update app teammate
     */
    async updateAppTeammateRaw(requestParameters: UpdateAppTeammateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppTeammateModel>> {
        if (requestParameters['xAuthorization'] == null) {
            throw new runtime.RequiredError(
                'xAuthorization',
                'Required parameter "xAuthorization" was null or undefined when calling updateAppTeammate().'
            );
        }

        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling updateAppTeammate().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling updateAppTeammate().'
            );
        }

        if (requestParameters['updateAppTeammateRequest'] == null) {
            throw new runtime.RequiredError(
                'updateAppTeammateRequest',
                'Required parameter "updateAppTeammateRequest" was null or undefined when calling updateAppTeammate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xAuthorization'] != null) {
            headerParameters['x-authorization'] = String(requestParameters['xAuthorization']);
        }

        const response = await this.request({
            path: `/v1/apps/{appId}/teammates/{userId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAppTeammateRequestToJSON(requestParameters['updateAppTeammateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppTeammateModelFromJSON(jsonValue));
    }

    /**
     * Update the role of a teammate for the provided appId and userId. Authorized user must be the owner of the app, or be a teammate with a role of OWNER.
     * Update app teammate
     */
    async updateAppTeammate(requestParameters: UpdateAppTeammateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppTeammateModel> {
        const response = await this.updateAppTeammateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
