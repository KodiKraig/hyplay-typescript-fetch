/* tslint:disable */
/* eslint-disable */
/**
 * HYPLAY API
 * HYPLAY API Specification
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: braydon@hytopia.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetAppUsers200Response,
  GetUser200Response,
} from '../models/index';
import {
    GetAppUsers200ResponseFromJSON,
    GetAppUsers200ResponseToJSON,
    GetUser200ResponseFromJSON,
    GetUser200ResponseToJSON,
} from '../models/index';

export interface GetCurrentUserRequest {
    xSessionAuthorization: string;
}

export interface GetUserRequest {
    userId?: string;
    username?: string;
    walletAddress?: string;
}

/**
 * UsersApi - interface
 * 
 * @export
 * @interface UsersApiInterface
 */
export interface UsersApiInterface {
    /**
     * Returns a public user object associated with the provided session access token.
     * @summary Get current user
     * @param {string} xSessionAuthorization The &#x60;accessToken&#x60; of the authenticating session.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getCurrentUserRaw(requestParameters: GetCurrentUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAppUsers200Response>>;

    /**
     * Returns a public user object associated with the provided session access token.
     * Get current user
     */
    getCurrentUser(requestParameters: GetCurrentUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAppUsers200Response>;

    /**
     * Returns a public user object when provided a user id, username or wallet address.
     * @summary Get user
     * @param {string} [userId] A user id.
     * @param {string} [username] A user username.
     * @param {string} [walletAddress] A wallet address.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getUserRaw(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUser200Response>>;

    /**
     * Returns a public user object when provided a user id, username or wallet address.
     * Get user
     */
    getUser(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUser200Response>;

}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI implements UsersApiInterface {

    /**
     * Returns a public user object associated with the provided session access token.
     * Get current user
     */
    async getCurrentUserRaw(requestParameters: GetCurrentUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAppUsers200Response>> {
        if (requestParameters['xSessionAuthorization'] == null) {
            throw new runtime.RequiredError(
                'xSessionAuthorization',
                'Required parameter "xSessionAuthorization" was null or undefined when calling getCurrentUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xSessionAuthorization'] != null) {
            headerParameters['x-session-authorization'] = String(requestParameters['xSessionAuthorization']);
        }

        const response = await this.request({
            path: `/v1/users/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAppUsers200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a public user object associated with the provided session access token.
     * Get current user
     */
    async getCurrentUser(requestParameters: GetCurrentUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAppUsers200Response> {
        const response = await this.getCurrentUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a public user object when provided a user id, username or wallet address.
     * Get user
     */
    async getUserRaw(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUser200Response>> {
        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['username'] != null) {
            queryParameters['username'] = requestParameters['username'];
        }

        if (requestParameters['walletAddress'] != null) {
            queryParameters['walletAddress'] = requestParameters['walletAddress'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUser200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a public user object when provided a user id, username or wallet address.
     * Get user
     */
    async getUser(requestParameters: GetUserRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUser200Response> {
        const response = await this.getUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
