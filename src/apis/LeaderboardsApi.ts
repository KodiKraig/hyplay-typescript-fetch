/* tslint:disable */
/* eslint-disable */
/**
 * HYPLAY API
 * HYPLAY API Specification
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: braydon@hytopia.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateLeaderboard200Response,
  CreateLeaderboardRequest,
  CreateLeaderboardScoreRequest,
  DeleteLeaderboardScoreRequest,
  GetLeaderboardScore200Response,
  GetLeaderboardScores200Response,
  GetLeaderboards200ResponseInner,
  UpdateLeaderboard200Response,
  UpdateLeaderboardRequest,
} from '../models/index';

export interface CreateLeaderboardOperationRequest {
    xAppAuthorization: string;
    appId: string;
    createLeaderboardRequest: CreateLeaderboardRequest;
}

export interface CreateLeaderboardScoreOperationRequest {
    appId: string;
    leaderboardId: string;
    createLeaderboardScoreRequest: CreateLeaderboardScoreRequest;
    xAppAuthorization?: string;
    xSessionAuthorization?: string;
}

export interface DeleteLeaderboardScoreOperationRequest {
    xAppAuthorization: string;
    appId: string;
    leaderboardId: string;
    deleteLeaderboardScoreRequest: DeleteLeaderboardScoreRequest;
}

export interface GetLeaderboardRequest {
    appId: string;
    leaderboardId: string;
}

export interface GetLeaderboardKeyRequest {
    xAppAuthorization: string;
    appId: string;
    leaderboardId: string;
}

export interface GetLeaderboardScoreRequest {
    appId: string;
    leaderboardId: string;
    userId?: string;
}

export interface GetLeaderboardScoresRequest {
    appId: string;
    leaderboardId: string;
    sort?: string;
    offset?: number;
    limit?: number;
}

export interface GetLeaderboardsRequest {
    appId: string;
}

export interface UpdateLeaderboardOperationRequest {
    xAppAuthorization: string;
    appId: string;
    leaderboardId: string;
    updateLeaderboardRequest: UpdateLeaderboardRequest;
}

/**
 * LeaderboardsApi - interface
 * 
 * @export
 * @interface LeaderboardsApiInterface
 */
export interface LeaderboardsApiInterface {
    /**
     * Create a leaderboard for the app.
     * @summary Create leaderboard
     * @param {string} xAppAuthorization The &#x60;secretKey&#x60; or &#x60;testSecretKey&#x60; of the authenticating app.
     * @param {string} appId An application id.
     * @param {CreateLeaderboardRequest} createLeaderboardRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaderboardsApiInterface
     */
    createLeaderboardRaw(requestParameters: CreateLeaderboardOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateLeaderboard200Response>>;

    /**
     * Create a leaderboard for the app.
     * Create leaderboard
     */
    createLeaderboard(requestParameters: CreateLeaderboardOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateLeaderboard200Response>;

    /**
     * Create a score for the provided leaderboardId. Leaderboard scores can be provided for any user id when the app secret key authorization is provided. Alternatively, a user may submit their own scores by provided their session authorization, with a request body containing `score` and `hash`. A valid `hash` is intended to be generated for each score within the game client as sha256(leaderboardKey:userId:score).
     * @summary Create leaderboard score
     * @param {string} appId An application id.
     * @param {string} leaderboardId A leaderboard id.
     * @param {CreateLeaderboardScoreRequest} createLeaderboardScoreRequest 
     * @param {string} [xAppAuthorization] The &#x60;secretKey&#x60; or &#x60;testSecretKey&#x60; of the authenticating app.
     * @param {string} [xSessionAuthorization] The &#x60;accessToken&#x60; of the authenticating session.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaderboardsApiInterface
     */
    createLeaderboardScoreRaw(requestParameters: CreateLeaderboardScoreOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetLeaderboardScore200Response>>;

    /**
     * Create a score for the provided leaderboardId. Leaderboard scores can be provided for any user id when the app secret key authorization is provided. Alternatively, a user may submit their own scores by provided their session authorization, with a request body containing `score` and `hash`. A valid `hash` is intended to be generated for each score within the game client as sha256(leaderboardKey:userId:score).
     * Create leaderboard score
     */
    createLeaderboardScore(requestParameters: CreateLeaderboardScoreOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetLeaderboardScore200Response>;

    /**
     * Delete a score for the provided leaderboardId and userId.
     * @summary Delete leaderboard score
     * @param {string} xAppAuthorization The &#x60;secretKey&#x60; or &#x60;testSecretKey&#x60; of the authenticating app.
     * @param {string} appId An application id.
     * @param {string} leaderboardId A leaderboard id.
     * @param {DeleteLeaderboardScoreRequest} deleteLeaderboardScoreRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaderboardsApiInterface
     */
    deleteLeaderboardScoreRaw(requestParameters: DeleteLeaderboardScoreOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a score for the provided leaderboardId and userId.
     * Delete leaderboard score
     */
    deleteLeaderboardScore(requestParameters: DeleteLeaderboardScoreOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Get a leaderboard of the app.
     * @summary Get leaderboard
     * @param {string} appId An application id.
     * @param {string} leaderboardId A leaderboard id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaderboardsApiInterface
     */
    getLeaderboardRaw(requestParameters: GetLeaderboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetLeaderboards200ResponseInner>>;

    /**
     * Get a leaderboard of the app.
     * Get leaderboard
     */
    getLeaderboard(requestParameters: GetLeaderboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetLeaderboards200ResponseInner>;

    /**
     * Get the key for a leaderboard.
     * @summary Get leaderboard key
     * @param {string} xAppAuthorization The &#x60;secretKey&#x60; or &#x60;testSecretKey&#x60; of the authenticating app.
     * @param {string} appId An application id.
     * @param {string} leaderboardId A leaderboard id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaderboardsApiInterface
     */
    getLeaderboardKeyRaw(requestParameters: GetLeaderboardKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Get the key for a leaderboard.
     * Get leaderboard key
     */
    getLeaderboardKey(requestParameters: GetLeaderboardKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * Get a leaderboard score.
     * @summary Get leaderboard score
     * @param {string} appId An application id.
     * @param {string} leaderboardId A leaderboard id.
     * @param {string} [userId] A user id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaderboardsApiInterface
     */
    getLeaderboardScoreRaw(requestParameters: GetLeaderboardScoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetLeaderboardScore200Response>>;

    /**
     * Get a leaderboard score.
     * Get leaderboard score
     */
    getLeaderboardScore(requestParameters: GetLeaderboardScoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetLeaderboardScore200Response>;

    /**
     * Get an array of scores for the provided leaderboardId. Returns an array default orderered by scores descending. Additionally supports pagination via the `offset` and `limit query parameters. Leaderboard scores return a default of 25 scores.
     * @summary Get leaderboard scores
     * @param {string} appId An application id.
     * @param {string} leaderboardId A leaderboard id.
     * @param {string} [sort] A sort order.
     * @param {number} [offset] The offset of the first item to return.
     * @param {number} [limit] The maximum number of items to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaderboardsApiInterface
     */
    getLeaderboardScoresRaw(requestParameters: GetLeaderboardScoresRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetLeaderboardScores200Response>>;

    /**
     * Get an array of scores for the provided leaderboardId. Returns an array default orderered by scores descending. Additionally supports pagination via the `offset` and `limit query parameters. Leaderboard scores return a default of 25 scores.
     * Get leaderboard scores
     */
    getLeaderboardScores(requestParameters: GetLeaderboardScoresRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetLeaderboardScores200Response>;

    /**
     * Get the leaderboards of the app.
     * @summary Get leaderboards
     * @param {string} appId An application id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaderboardsApiInterface
     */
    getLeaderboardsRaw(requestParameters: GetLeaderboardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetLeaderboards200ResponseInner>>>;

    /**
     * Get the leaderboards of the app.
     * Get leaderboards
     */
    getLeaderboards(requestParameters: GetLeaderboardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetLeaderboards200ResponseInner>>;

    /**
     * Update a leaderboard of the app.
     * @summary Update leaderboard
     * @param {string} xAppAuthorization The &#x60;secretKey&#x60; or &#x60;testSecretKey&#x60; of the authenticating app.
     * @param {string} appId An application id.
     * @param {string} leaderboardId A leaderboard id.
     * @param {UpdateLeaderboardRequest} updateLeaderboardRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaderboardsApiInterface
     */
    updateLeaderboardRaw(requestParameters: UpdateLeaderboardOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateLeaderboard200Response>>;

    /**
     * Update a leaderboard of the app.
     * Update leaderboard
     */
    updateLeaderboard(requestParameters: UpdateLeaderboardOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateLeaderboard200Response>;

}

/**
 * 
 */
export class LeaderboardsApi extends runtime.BaseAPI implements LeaderboardsApiInterface {

    /**
     * Create a leaderboard for the app.
     * Create leaderboard
     */
    async createLeaderboardRaw(requestParameters: CreateLeaderboardOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateLeaderboard200Response>> {
        if (requestParameters['xAppAuthorization'] == null) {
            throw new runtime.RequiredError(
                'xAppAuthorization',
                'Required parameter "xAppAuthorization" was null or undefined when calling createLeaderboard().'
            );
        }

        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling createLeaderboard().'
            );
        }

        if (requestParameters['createLeaderboardRequest'] == null) {
            throw new runtime.RequiredError(
                'createLeaderboardRequest',
                'Required parameter "createLeaderboardRequest" was null or undefined when calling createLeaderboard().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xAppAuthorization'] != null) {
            headerParameters['x-app-authorization'] = String(requestParameters['xAppAuthorization']);
        }

        const response = await this.request({
            path: `/v1/apps/{appId}/leaderboards`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['createLeaderboardRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create a leaderboard for the app.
     * Create leaderboard
     */
    async createLeaderboard(requestParameters: CreateLeaderboardOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateLeaderboard200Response> {
        const response = await this.createLeaderboardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a score for the provided leaderboardId. Leaderboard scores can be provided for any user id when the app secret key authorization is provided. Alternatively, a user may submit their own scores by provided their session authorization, with a request body containing `score` and `hash`. A valid `hash` is intended to be generated for each score within the game client as sha256(leaderboardKey:userId:score).
     * Create leaderboard score
     */
    async createLeaderboardScoreRaw(requestParameters: CreateLeaderboardScoreOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetLeaderboardScore200Response>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling createLeaderboardScore().'
            );
        }

        if (requestParameters['leaderboardId'] == null) {
            throw new runtime.RequiredError(
                'leaderboardId',
                'Required parameter "leaderboardId" was null or undefined when calling createLeaderboardScore().'
            );
        }

        if (requestParameters['createLeaderboardScoreRequest'] == null) {
            throw new runtime.RequiredError(
                'createLeaderboardScoreRequest',
                'Required parameter "createLeaderboardScoreRequest" was null or undefined when calling createLeaderboardScore().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xAppAuthorization'] != null) {
            headerParameters['x-app-authorization'] = String(requestParameters['xAppAuthorization']);
        }

        if (requestParameters['xSessionAuthorization'] != null) {
            headerParameters['x-session-authorization'] = String(requestParameters['xSessionAuthorization']);
        }

        const response = await this.request({
            path: `/v1/apps/{appId}/leaderboards/{leaderboardId}/scores`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId']))).replace(`{${"leaderboardId"}}`, encodeURIComponent(String(requestParameters['leaderboardId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['createLeaderboardScoreRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create a score for the provided leaderboardId. Leaderboard scores can be provided for any user id when the app secret key authorization is provided. Alternatively, a user may submit their own scores by provided their session authorization, with a request body containing `score` and `hash`. A valid `hash` is intended to be generated for each score within the game client as sha256(leaderboardKey:userId:score).
     * Create leaderboard score
     */
    async createLeaderboardScore(requestParameters: CreateLeaderboardScoreOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetLeaderboardScore200Response> {
        const response = await this.createLeaderboardScoreRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a score for the provided leaderboardId and userId.
     * Delete leaderboard score
     */
    async deleteLeaderboardScoreRaw(requestParameters: DeleteLeaderboardScoreOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['xAppAuthorization'] == null) {
            throw new runtime.RequiredError(
                'xAppAuthorization',
                'Required parameter "xAppAuthorization" was null or undefined when calling deleteLeaderboardScore().'
            );
        }

        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling deleteLeaderboardScore().'
            );
        }

        if (requestParameters['leaderboardId'] == null) {
            throw new runtime.RequiredError(
                'leaderboardId',
                'Required parameter "leaderboardId" was null or undefined when calling deleteLeaderboardScore().'
            );
        }

        if (requestParameters['deleteLeaderboardScoreRequest'] == null) {
            throw new runtime.RequiredError(
                'deleteLeaderboardScoreRequest',
                'Required parameter "deleteLeaderboardScoreRequest" was null or undefined when calling deleteLeaderboardScore().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xAppAuthorization'] != null) {
            headerParameters['x-app-authorization'] = String(requestParameters['xAppAuthorization']);
        }

        const response = await this.request({
            path: `/v1/apps/{appId}/leaderboards/{leaderboardId}/scores`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId']))).replace(`{${"leaderboardId"}}`, encodeURIComponent(String(requestParameters['leaderboardId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['deleteLeaderboardScoreRequest'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a score for the provided leaderboardId and userId.
     * Delete leaderboard score
     */
    async deleteLeaderboardScore(requestParameters: DeleteLeaderboardScoreOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteLeaderboardScoreRaw(requestParameters, initOverrides);
    }

    /**
     * Get a leaderboard of the app.
     * Get leaderboard
     */
    async getLeaderboardRaw(requestParameters: GetLeaderboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetLeaderboards200ResponseInner>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling getLeaderboard().'
            );
        }

        if (requestParameters['leaderboardId'] == null) {
            throw new runtime.RequiredError(
                'leaderboardId',
                'Required parameter "leaderboardId" was null or undefined when calling getLeaderboard().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/apps/{appId}/leaderboards/{leaderboardId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId']))).replace(`{${"leaderboardId"}}`, encodeURIComponent(String(requestParameters['leaderboardId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get a leaderboard of the app.
     * Get leaderboard
     */
    async getLeaderboard(requestParameters: GetLeaderboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetLeaderboards200ResponseInner> {
        const response = await this.getLeaderboardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the key for a leaderboard.
     * Get leaderboard key
     */
    async getLeaderboardKeyRaw(requestParameters: GetLeaderboardKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['xAppAuthorization'] == null) {
            throw new runtime.RequiredError(
                'xAppAuthorization',
                'Required parameter "xAppAuthorization" was null or undefined when calling getLeaderboardKey().'
            );
        }

        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling getLeaderboardKey().'
            );
        }

        if (requestParameters['leaderboardId'] == null) {
            throw new runtime.RequiredError(
                'leaderboardId',
                'Required parameter "leaderboardId" was null or undefined when calling getLeaderboardKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAppAuthorization'] != null) {
            headerParameters['x-app-authorization'] = String(requestParameters['xAppAuthorization']);
        }

        const response = await this.request({
            path: `/v1/apps/{appId}/leaderboards/{leaderboardId}/key`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId']))).replace(`{${"leaderboardId"}}`, encodeURIComponent(String(requestParameters['leaderboardId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get the key for a leaderboard.
     * Get leaderboard key
     */
    async getLeaderboardKey(requestParameters: GetLeaderboardKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getLeaderboardKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a leaderboard score.
     * Get leaderboard score
     */
    async getLeaderboardScoreRaw(requestParameters: GetLeaderboardScoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetLeaderboardScore200Response>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling getLeaderboardScore().'
            );
        }

        if (requestParameters['leaderboardId'] == null) {
            throw new runtime.RequiredError(
                'leaderboardId',
                'Required parameter "leaderboardId" was null or undefined when calling getLeaderboardScore().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/apps/{appId}/leaderboards/{leaderboardId}/score`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId']))).replace(`{${"leaderboardId"}}`, encodeURIComponent(String(requestParameters['leaderboardId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get a leaderboard score.
     * Get leaderboard score
     */
    async getLeaderboardScore(requestParameters: GetLeaderboardScoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetLeaderboardScore200Response> {
        const response = await this.getLeaderboardScoreRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an array of scores for the provided leaderboardId. Returns an array default orderered by scores descending. Additionally supports pagination via the `offset` and `limit query parameters. Leaderboard scores return a default of 25 scores.
     * Get leaderboard scores
     */
    async getLeaderboardScoresRaw(requestParameters: GetLeaderboardScoresRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetLeaderboardScores200Response>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling getLeaderboardScores().'
            );
        }

        if (requestParameters['leaderboardId'] == null) {
            throw new runtime.RequiredError(
                'leaderboardId',
                'Required parameter "leaderboardId" was null or undefined when calling getLeaderboardScores().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/apps/{appId}/leaderboards/{leaderboardId}/scores`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId']))).replace(`{${"leaderboardId"}}`, encodeURIComponent(String(requestParameters['leaderboardId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get an array of scores for the provided leaderboardId. Returns an array default orderered by scores descending. Additionally supports pagination via the `offset` and `limit query parameters. Leaderboard scores return a default of 25 scores.
     * Get leaderboard scores
     */
    async getLeaderboardScores(requestParameters: GetLeaderboardScoresRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetLeaderboardScores200Response> {
        const response = await this.getLeaderboardScoresRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the leaderboards of the app.
     * Get leaderboards
     */
    async getLeaderboardsRaw(requestParameters: GetLeaderboardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetLeaderboards200ResponseInner>>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling getLeaderboards().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/apps/{appId}/leaderboards`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get the leaderboards of the app.
     * Get leaderboards
     */
    async getLeaderboards(requestParameters: GetLeaderboardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetLeaderboards200ResponseInner>> {
        const response = await this.getLeaderboardsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a leaderboard of the app.
     * Update leaderboard
     */
    async updateLeaderboardRaw(requestParameters: UpdateLeaderboardOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateLeaderboard200Response>> {
        if (requestParameters['xAppAuthorization'] == null) {
            throw new runtime.RequiredError(
                'xAppAuthorization',
                'Required parameter "xAppAuthorization" was null or undefined when calling updateLeaderboard().'
            );
        }

        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling updateLeaderboard().'
            );
        }

        if (requestParameters['leaderboardId'] == null) {
            throw new runtime.RequiredError(
                'leaderboardId',
                'Required parameter "leaderboardId" was null or undefined when calling updateLeaderboard().'
            );
        }

        if (requestParameters['updateLeaderboardRequest'] == null) {
            throw new runtime.RequiredError(
                'updateLeaderboardRequest',
                'Required parameter "updateLeaderboardRequest" was null or undefined when calling updateLeaderboard().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xAppAuthorization'] != null) {
            headerParameters['x-app-authorization'] = String(requestParameters['xAppAuthorization']);
        }

        const response = await this.request({
            path: `/v1/apps/{appId}/leaderboards/{leaderboardId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId']))).replace(`{${"leaderboardId"}}`, encodeURIComponent(String(requestParameters['leaderboardId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['updateLeaderboardRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update a leaderboard of the app.
     * Update leaderboard
     */
    async updateLeaderboard(requestParameters: UpdateLeaderboardOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateLeaderboard200Response> {
        const response = await this.updateLeaderboardRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
