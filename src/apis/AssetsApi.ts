/* tslint:disable */
/* eslint-disable */
/**
 * HYPLAY API
 * HYPLAY API Specification
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: braydon@hytopia.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AssetModel,
  CreateAssetRequest,
} from '../models/index';
import {
    AssetModelFromJSON,
    AssetModelToJSON,
    CreateAssetRequestFromJSON,
    CreateAssetRequestToJSON,
} from '../models/index';

export interface CreateAssetOperationRequest {
    xAuthorization: string;
    createAssetRequest: CreateAssetRequest;
}

export interface GetAssetRequest {
    assetId: string;
    xAuthorization: string;
}

export interface GetAssetsRequest {
    xAuthorization: string;
}

/**
 * AssetsApi - interface
 * 
 * @export
 * @interface AssetsApiInterface
 */
export interface AssetsApiInterface {
    /**
     * Create an asset object by uploading a file in base64. Returns an asset object.
     * @summary Create asset
     * @param {string} xAuthorization The &#x60;accessToken&#x60; of the authenticating user.
     * @param {CreateAssetRequest} createAssetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    createAssetRaw(requestParameters: CreateAssetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetModel>>;

    /**
     * Create an asset object by uploading a file in base64. Returns an asset object.
     * Create asset
     */
    createAsset(requestParameters: CreateAssetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetModel>;

    /**
     * Return an asset object that has been uploaded by the authorized user for the provided assetId.
     * @summary Get asset
     * @param {string} assetId An asset id.
     * @param {string} xAuthorization The &#x60;accessToken&#x60; of the authenticating user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    getAssetRaw(requestParameters: GetAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetModel>>;

    /**
     * Return an asset object that has been uploaded by the authorized user for the provided assetId.
     * Get asset
     */
    getAsset(requestParameters: GetAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetModel>;

    /**
     * Returns an array of assets that have been uploaded by the authorized user ordered by most recent creation.
     * @summary Get assets
     * @param {string} xAuthorization The &#x60;accessToken&#x60; of the authenticating user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    getAssetsRaw(requestParameters: GetAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AssetModel>>>;

    /**
     * Returns an array of assets that have been uploaded by the authorized user ordered by most recent creation.
     * Get assets
     */
    getAssets(requestParameters: GetAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AssetModel>>;

}

/**
 * 
 */
export class AssetsApi extends runtime.BaseAPI implements AssetsApiInterface {

    /**
     * Create an asset object by uploading a file in base64. Returns an asset object.
     * Create asset
     */
    async createAssetRaw(requestParameters: CreateAssetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetModel>> {
        if (requestParameters['xAuthorization'] == null) {
            throw new runtime.RequiredError(
                'xAuthorization',
                'Required parameter "xAuthorization" was null or undefined when calling createAsset().'
            );
        }

        if (requestParameters['createAssetRequest'] == null) {
            throw new runtime.RequiredError(
                'createAssetRequest',
                'Required parameter "createAssetRequest" was null or undefined when calling createAsset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xAuthorization'] != null) {
            headerParameters['x-authorization'] = String(requestParameters['xAuthorization']);
        }

        const response = await this.request({
            path: `/v1/assets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAssetRequestToJSON(requestParameters['createAssetRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetModelFromJSON(jsonValue));
    }

    /**
     * Create an asset object by uploading a file in base64. Returns an asset object.
     * Create asset
     */
    async createAsset(requestParameters: CreateAssetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetModel> {
        const response = await this.createAssetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return an asset object that has been uploaded by the authorized user for the provided assetId.
     * Get asset
     */
    async getAssetRaw(requestParameters: GetAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetModel>> {
        if (requestParameters['assetId'] == null) {
            throw new runtime.RequiredError(
                'assetId',
                'Required parameter "assetId" was null or undefined when calling getAsset().'
            );
        }

        if (requestParameters['xAuthorization'] == null) {
            throw new runtime.RequiredError(
                'xAuthorization',
                'Required parameter "xAuthorization" was null or undefined when calling getAsset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAuthorization'] != null) {
            headerParameters['x-authorization'] = String(requestParameters['xAuthorization']);
        }

        const response = await this.request({
            path: `/v1/assets/{assetId}`.replace(`{${"assetId"}}`, encodeURIComponent(String(requestParameters['assetId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetModelFromJSON(jsonValue));
    }

    /**
     * Return an asset object that has been uploaded by the authorized user for the provided assetId.
     * Get asset
     */
    async getAsset(requestParameters: GetAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetModel> {
        const response = await this.getAssetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns an array of assets that have been uploaded by the authorized user ordered by most recent creation.
     * Get assets
     */
    async getAssetsRaw(requestParameters: GetAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AssetModel>>> {
        if (requestParameters['xAuthorization'] == null) {
            throw new runtime.RequiredError(
                'xAuthorization',
                'Required parameter "xAuthorization" was null or undefined when calling getAssets().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAuthorization'] != null) {
            headerParameters['x-authorization'] = String(requestParameters['xAuthorization']);
        }

        const response = await this.request({
            path: `/v1/assets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AssetModelFromJSON));
    }

    /**
     * Returns an array of assets that have been uploaded by the authorized user ordered by most recent creation.
     * Get assets
     */
    async getAssets(requestParameters: GetAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AssetModel>> {
        const response = await this.getAssetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
