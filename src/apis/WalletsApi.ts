/* tslint:disable */
/* eslint-disable */
/**
 * HYPLAY API
 * HYPLAY API Specification
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: braydon@hytopia.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetWallet200Response,
  TransactionModel,
  UpdateWalletRequest,
} from '../models/index';
import {
    GetWallet200ResponseFromJSON,
    GetWallet200ResponseToJSON,
    TransactionModelFromJSON,
    TransactionModelToJSON,
    UpdateWalletRequestFromJSON,
    UpdateWalletRequestToJSON,
} from '../models/index';

export interface GetWalletRequest {
    walletIdOrAddress: string;
}

export interface GetWalletBalanceRequest {
    walletIdOrAddress: string;
    chain?: GetWalletBalanceChainEnum;
}

export interface UpdateWalletOperationRequest {
    walletIdOrAddress: string;
    xAuthorization: string;
    updateWalletRequest: UpdateWalletRequest;
}

/**
 * WalletsApi - interface
 * 
 * @export
 * @interface WalletsApiInterface
 */
export interface WalletsApiInterface {
    /**
     * Returns a wallet object for the provided walletIdOrAddress. If walletIdOrAddress is a HYCHAIN system wallet id, it will return a matching wallet for the id. If walletIdOrAddress is a on chain smart contract wallet address, it will return a matching wallet from the HYCHAIN system. If a wallet is not found in HYCHAIN\'s systems for the address or walletId provided, a 400 error will be returned.
     * @summary Get wallet
     * @param {string} walletIdOrAddress A wallet id or address.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApiInterface
     */
    getWalletRaw(requestParameters: GetWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWallet200Response>>;

    /**
     * Returns a wallet object for the provided walletIdOrAddress. If walletIdOrAddress is a HYCHAIN system wallet id, it will return a matching wallet for the id. If walletIdOrAddress is a on chain smart contract wallet address, it will return a matching wallet from the HYCHAIN system. If a wallet is not found in HYCHAIN\'s systems for the address or walletId provided, a 400 error will be returned.
     * Get wallet
     */
    getWallet(requestParameters: GetWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWallet200Response>;

    /**
     * Returns the native token balance for the smart contract wallet associated with a wallet id provided for walletIdOrAddress. Or, if any address is provided for walletIdOrAddress, it will return the native token balance for the address.
     * @summary Get wallet balance
     * @param {string} walletIdOrAddress A wallet id or address.
     * @param {'HYCHAIN' | 'HYCHAIN_TESTNET' | 'LOCAL'} [chain] A chain name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApiInterface
     */
    getWalletBalanceRaw(requestParameters: GetWalletBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Returns the native token balance for the smart contract wallet associated with a wallet id provided for walletIdOrAddress. Or, if any address is provided for walletIdOrAddress, it will return the native token balance for the address.
     * Get wallet balance
     */
    getWalletBalance(requestParameters: GetWalletBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * Update various fields specific to a wallet. This endpoint is currently used for optining in to upgrade a user or application smart contract wallet to the latest implementation if necessary.
     * @summary Update wallet
     * @param {string} walletIdOrAddress A wallet id or address.
     * @param {string} xAuthorization The &#x60;accessToken&#x60; of the authenticating user.
     * @param {UpdateWalletRequest} updateWalletRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApiInterface
     */
    updateWalletRaw(requestParameters: UpdateWalletOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionModel>>;

    /**
     * Update various fields specific to a wallet. This endpoint is currently used for optining in to upgrade a user or application smart contract wallet to the latest implementation if necessary.
     * Update wallet
     */
    updateWallet(requestParameters: UpdateWalletOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionModel>;

}

/**
 * 
 */
export class WalletsApi extends runtime.BaseAPI implements WalletsApiInterface {

    /**
     * Returns a wallet object for the provided walletIdOrAddress. If walletIdOrAddress is a HYCHAIN system wallet id, it will return a matching wallet for the id. If walletIdOrAddress is a on chain smart contract wallet address, it will return a matching wallet from the HYCHAIN system. If a wallet is not found in HYCHAIN\'s systems for the address or walletId provided, a 400 error will be returned.
     * Get wallet
     */
    async getWalletRaw(requestParameters: GetWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWallet200Response>> {
        if (requestParameters['walletIdOrAddress'] == null) {
            throw new runtime.RequiredError(
                'walletIdOrAddress',
                'Required parameter "walletIdOrAddress" was null or undefined when calling getWallet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/wallets/{walletIdOrAddress}`.replace(`{${"walletIdOrAddress"}}`, encodeURIComponent(String(requestParameters['walletIdOrAddress']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetWallet200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a wallet object for the provided walletIdOrAddress. If walletIdOrAddress is a HYCHAIN system wallet id, it will return a matching wallet for the id. If walletIdOrAddress is a on chain smart contract wallet address, it will return a matching wallet from the HYCHAIN system. If a wallet is not found in HYCHAIN\'s systems for the address or walletId provided, a 400 error will be returned.
     * Get wallet
     */
    async getWallet(requestParameters: GetWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWallet200Response> {
        const response = await this.getWalletRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the native token balance for the smart contract wallet associated with a wallet id provided for walletIdOrAddress. Or, if any address is provided for walletIdOrAddress, it will return the native token balance for the address.
     * Get wallet balance
     */
    async getWalletBalanceRaw(requestParameters: GetWalletBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['walletIdOrAddress'] == null) {
            throw new runtime.RequiredError(
                'walletIdOrAddress',
                'Required parameter "walletIdOrAddress" was null or undefined when calling getWalletBalance().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['chain'] != null) {
            queryParameters['chain'] = requestParameters['chain'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/wallets/{walletIdOrAddress}/balance`.replace(`{${"walletIdOrAddress"}}`, encodeURIComponent(String(requestParameters['walletIdOrAddress']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Returns the native token balance for the smart contract wallet associated with a wallet id provided for walletIdOrAddress. Or, if any address is provided for walletIdOrAddress, it will return the native token balance for the address.
     * Get wallet balance
     */
    async getWalletBalance(requestParameters: GetWalletBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getWalletBalanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update various fields specific to a wallet. This endpoint is currently used for optining in to upgrade a user or application smart contract wallet to the latest implementation if necessary.
     * Update wallet
     */
    async updateWalletRaw(requestParameters: UpdateWalletOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionModel>> {
        if (requestParameters['walletIdOrAddress'] == null) {
            throw new runtime.RequiredError(
                'walletIdOrAddress',
                'Required parameter "walletIdOrAddress" was null or undefined when calling updateWallet().'
            );
        }

        if (requestParameters['xAuthorization'] == null) {
            throw new runtime.RequiredError(
                'xAuthorization',
                'Required parameter "xAuthorization" was null or undefined when calling updateWallet().'
            );
        }

        if (requestParameters['updateWalletRequest'] == null) {
            throw new runtime.RequiredError(
                'updateWalletRequest',
                'Required parameter "updateWalletRequest" was null or undefined when calling updateWallet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xAuthorization'] != null) {
            headerParameters['x-authorization'] = String(requestParameters['xAuthorization']);
        }

        const response = await this.request({
            path: `/v1/wallets/{walletIdOrAddress}`.replace(`{${"walletIdOrAddress"}}`, encodeURIComponent(String(requestParameters['walletIdOrAddress']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateWalletRequestToJSON(requestParameters['updateWalletRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionModelFromJSON(jsonValue));
    }

    /**
     * Update various fields specific to a wallet. This endpoint is currently used for optining in to upgrade a user or application smart contract wallet to the latest implementation if necessary.
     * Update wallet
     */
    async updateWallet(requestParameters: UpdateWalletOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionModel> {
        const response = await this.updateWalletRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetWalletBalanceChainEnum = {
    Hychain: 'HYCHAIN',
    HychainTestnet: 'HYCHAIN_TESTNET',
    Local: 'LOCAL'
} as const;
export type GetWalletBalanceChainEnum = typeof GetWalletBalanceChainEnum[keyof typeof GetWalletBalanceChainEnum];
