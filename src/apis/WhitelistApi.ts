/* tslint:disable */
/* eslint-disable */
/**
 * HYPLAY API
 * HYPLAY API Specification
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: braydon@hytopia.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DeleteFromWhitelistRequest,
  GetWhitelist200Response,
  UpdateWhitelistRequest,
} from '../models/index';

export interface DeleteFromWhitelistOperationRequest {
    xAuthorization: string;
    appId: string;
    deleteFromWhitelistRequest: DeleteFromWhitelistRequest;
}

export interface GetWhitelistRequest {
    xAuthorization: string;
    appId: string;
}

export interface UpdateWhitelistOperationRequest {
    xAuthorization: string;
    appId: string;
    updateWhitelistRequest: UpdateWhitelistRequest;
}

/**
 * WhitelistApi - interface
 * 
 * @export
 * @interface WhitelistApiInterface
 */
export interface WhitelistApiInterface {
    /**
     * Delete entries from the whitelist for an app. All values are case-insensitive.
     * @summary Delete from whitelist
     * @param {string} xAuthorization The &#x60;accessToken&#x60; of the authenticating user.
     * @param {string} appId An application id.
     * @param {DeleteFromWhitelistRequest} deleteFromWhitelistRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhitelistApiInterface
     */
    deleteFromWhitelistRaw(requestParameters: DeleteFromWhitelistOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWhitelist200Response>>;

    /**
     * Delete entries from the whitelist for an app. All values are case-insensitive.
     * Delete from whitelist
     */
    deleteFromWhitelist(requestParameters: DeleteFromWhitelistOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWhitelist200Response>;

    /**
     * Get the whitelist data for an app. Returns all data in lower case to simplify case insensitive matching.
     * @summary Get whitelist
     * @param {string} xAuthorization The &#x60;accessToken&#x60; of the authenticating user.
     * @param {string} appId An application id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhitelistApiInterface
     */
    getWhitelistRaw(requestParameters: GetWhitelistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWhitelist200Response>>;

    /**
     * Get the whitelist data for an app. Returns all data in lower case to simplify case insensitive matching.
     * Get whitelist
     */
    getWhitelist(requestParameters: GetWhitelistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWhitelist200Response>;

    /**
     * Update the whitelist data for an app. Existing values provided will be ignored to prevent duplicates in the list. All values are case-insensitive.
     * @summary Update whitelist
     * @param {string} xAuthorization The &#x60;accessToken&#x60; of the authenticating user.
     * @param {string} appId An application id.
     * @param {UpdateWhitelistRequest} updateWhitelistRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhitelistApiInterface
     */
    updateWhitelistRaw(requestParameters: UpdateWhitelistOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWhitelist200Response>>;

    /**
     * Update the whitelist data for an app. Existing values provided will be ignored to prevent duplicates in the list. All values are case-insensitive.
     * Update whitelist
     */
    updateWhitelist(requestParameters: UpdateWhitelistOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWhitelist200Response>;

}

/**
 * 
 */
export class WhitelistApi extends runtime.BaseAPI implements WhitelistApiInterface {

    /**
     * Delete entries from the whitelist for an app. All values are case-insensitive.
     * Delete from whitelist
     */
    async deleteFromWhitelistRaw(requestParameters: DeleteFromWhitelistOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWhitelist200Response>> {
        if (requestParameters['xAuthorization'] == null) {
            throw new runtime.RequiredError(
                'xAuthorization',
                'Required parameter "xAuthorization" was null or undefined when calling deleteFromWhitelist().'
            );
        }

        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling deleteFromWhitelist().'
            );
        }

        if (requestParameters['deleteFromWhitelistRequest'] == null) {
            throw new runtime.RequiredError(
                'deleteFromWhitelistRequest',
                'Required parameter "deleteFromWhitelistRequest" was null or undefined when calling deleteFromWhitelist().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xAuthorization'] != null) {
            headerParameters['x-authorization'] = String(requestParameters['xAuthorization']);
        }

        const response = await this.request({
            path: `/v1/apps/{appId}/whitelist`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['deleteFromWhitelistRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Delete entries from the whitelist for an app. All values are case-insensitive.
     * Delete from whitelist
     */
    async deleteFromWhitelist(requestParameters: DeleteFromWhitelistOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWhitelist200Response> {
        const response = await this.deleteFromWhitelistRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the whitelist data for an app. Returns all data in lower case to simplify case insensitive matching.
     * Get whitelist
     */
    async getWhitelistRaw(requestParameters: GetWhitelistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWhitelist200Response>> {
        if (requestParameters['xAuthorization'] == null) {
            throw new runtime.RequiredError(
                'xAuthorization',
                'Required parameter "xAuthorization" was null or undefined when calling getWhitelist().'
            );
        }

        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling getWhitelist().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAuthorization'] != null) {
            headerParameters['x-authorization'] = String(requestParameters['xAuthorization']);
        }

        const response = await this.request({
            path: `/v1/apps/{appId}/whitelist`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get the whitelist data for an app. Returns all data in lower case to simplify case insensitive matching.
     * Get whitelist
     */
    async getWhitelist(requestParameters: GetWhitelistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWhitelist200Response> {
        const response = await this.getWhitelistRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the whitelist data for an app. Existing values provided will be ignored to prevent duplicates in the list. All values are case-insensitive.
     * Update whitelist
     */
    async updateWhitelistRaw(requestParameters: UpdateWhitelistOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWhitelist200Response>> {
        if (requestParameters['xAuthorization'] == null) {
            throw new runtime.RequiredError(
                'xAuthorization',
                'Required parameter "xAuthorization" was null or undefined when calling updateWhitelist().'
            );
        }

        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling updateWhitelist().'
            );
        }

        if (requestParameters['updateWhitelistRequest'] == null) {
            throw new runtime.RequiredError(
                'updateWhitelistRequest',
                'Required parameter "updateWhitelistRequest" was null or undefined when calling updateWhitelist().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xAuthorization'] != null) {
            headerParameters['x-authorization'] = String(requestParameters['xAuthorization']);
        }

        const response = await this.request({
            path: `/v1/apps/{appId}/whitelist`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['updateWhitelistRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update the whitelist data for an app. Existing values provided will be ignored to prevent duplicates in the list. All values are case-insensitive.
     * Update whitelist
     */
    async updateWhitelist(requestParameters: UpdateWhitelistOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWhitelist200Response> {
        const response = await this.updateWhitelistRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
